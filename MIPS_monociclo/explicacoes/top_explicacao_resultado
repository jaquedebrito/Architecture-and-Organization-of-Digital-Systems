Análise Detalhada do Módulo Top (Processador MIPS)
1. Introdução ao Processador MIPS

O módulo top integra todos os componentes do processador MIPS monociclo, criando um computador completo com memória de instruções, memória de dados e uma unidade de processamento central (CPU). Esta análise explica como todos os módulos interagem para formar um processador funcional.
2. Arquitetura Global do Sistema

O módulo top combina três grandes blocos:

    CPU (datapath + controller): Executa as instruções
    Memória de Instruções: Armazena o programa a ser executado
    Memória de Dados: Armazena dados que o programa manipula

2.1. Diagrama Simplificado da Arquitetura
Code
                    +-------------------+
                    |     Memória de    |
                    |    Instruções     |
                    +--------+----------+
                             |
                             v
            +---------------+---------------+
            |               |               |
            |    Controller + Datapath      |
            |      (CPU completa)           |
            |               |               |
            +---------------+---------------+
                             |
                             v
                    +-------------------+
                    |     Memória de    |
                    |       Dados       |
                    +-------------------+

3. Análise dos Módulos Componentes
3.1. Módulo Controller

O controller é o "cérebro" do processador, determinando como os dados devem fluir e quais operações devem ser executadas. É composto por dois submódulos:
3.1.1. Main Control (main_control.sv)

    Função: Decodifica a instrução e gera sinais de controle para o datapath
    Sinais Gerados:
        RegWrite: Habilita escrita nos registradores
        MemWrite: Habilita escrita na memória
        Branch: Indica instrução de desvio condicional
        ALUSrc: Seleciona operando da ULA (registrador ou imediato)
        RegDst: Seleciona registrador de destino
        MemtoReg: Seleciona origem dos dados para escrita em registrador
        Jump: Indica instrução de salto incondicional
        ALUOp: Indica categoria da operação para a ULA

3.1.2. ULA Control (ula_control.sv)

    Função: Gera sinais específicos para a ULA baseados no campo funct da instrução e no sinal ALUOp
    Sinais Gerados:
        ULAcontrol: Código de operação específico para a ULA (ADD, SUB, AND, OR, SLT, etc.)

3.2. Módulo Datapath

O datapath é o caminho por onde os dados fluem, incluindo registradores, ULA e conexões entre componentes:
3.2.1. Banco de Registradores (regfile.sv)

    Função: Armazena 32 registradores de 32 bits cada
    Operações: Leitura de dois registradores simultaneamente e escrita em um registrador
    Características: $0 é sempre zero, independentemente de escrita

3.2.2. ULA (ula.sv)

    Função: Realiza operações aritméticas e lógicas
    Operações Suportadas:
        AND (000): Operação lógica AND bit a bit
        OR (001): Operação lógica OR bit a bit
        ADD (010): Adição
        SUB (110): Subtração
        SLT (111): Set Less Than (compara se a < b)
    Sinais de Saída:
        Result: Resultado da operação
        Zero: Indica se resultado é zero

3.2.3. Extensão de Sinal (signext.sv)

    Função: Estende um valor imediato de 16 bits para 32 bits, mantendo o sinal

3.2.4. Shift Left 2 (sl2.sv)

    Função: Desloca o valor 2 bits para a esquerda (multiplica por 4)
    Uso: Cálculo de endereços para desvios e saltos

3.2.5. Program Counter (flopr.sv)

    Função: Registrador que armazena endereço da próxima instrução
    Características: Atualizado a cada ciclo de clock

3.2.6. Somador (adder.sv)

    Função: Realiza adição de 32 bits
    Uso: Incremento do PC e cálculo de endereços de desvio

3.2.7. Multiplexador 2:1 (mux2.sv)

    Função: Seleciona entre duas entradas baseado em um sinal de controle
    Uso: Várias instâncias para selecionar dados em diferentes pontos do datapath

3.3. Memórias
3.3.1. Memória de Instruções (instruction_memory.sv)

    Função: Armazena o programa a ser executado
    Características: Somente leitura, carregada a partir do arquivo memfile.dat

3.3.2. Memória de Dados (data_memory.sv)

    Função: Armazena dados que o programa manipula
    Operações: Leitura e escrita em endereços especificados pela ULA

4. Fluxo de Execução das Instruções
4.1. Ciclo de Busca

    O valor do PC é usado para endereçar a memória de instruções
    A instrução é lida da memória de instruções
    O PC é incrementado em 4 para apontar para a próxima instrução

4.2. Ciclo de Decodificação

    A instrução é dividida em campos (opcode, rs, rt, rd, funct, imediato)
    O controller decodifica a instrução e gera sinais de controle
    Os registradores especificados são lidos do banco de registradores

4.3. Ciclo de Execução

    A ULA realiza a operação especificada pelo ULA Control
    Para instruções de desvio, o resultado da ULA determina se o desvio é tomado
    Para instruções de acesso à memória, a ULA calcula o endereço

4.4. Ciclo de Acesso à Memória

    Para instruções de carga (LW), um dado é lido da memória
    Para instruções de armazenamento (SW), um dado é escrito na memória

4.5. Ciclo de Writeback

    O resultado da ULA ou o dado lido da memória é escrito no registro de destino

5. Análise da Simulação Executada

A simulação mostra a execução de 17 instruções que demonstram todas as funcionalidades do processador:
5.1. Instruções Executadas

    Ciclos 1-3: Instruções addi para inicializar registradores
    Ciclos 4-6: Instruções de operações lógicas e aritméticas (or, and, add)
    Ciclo 7: Instrução de desvio beq (não tomado)
    Ciclos 8-9: Operação slt e outro beq (tomado)
    Ciclos 10-12: Mais instruções aritméticas (slt, add, sub)
    Ciclos 13-14: Acesso à memória (sw, lw)
    Ciclo 15: Instrução de salto j
    Ciclos 16-17: Finalização com addi e sw

5.2. Estado Final do Processador

    Registradores: $2=1, $3=12, $4=1, $5=11, $7=7
    Memória de Dados: Mem[0x50]=7, Mem[0x54]=12

5.3. Comportamento das Operações-Chave
Operação de Carga (LW)

    Gera endereço pela ULA (ADD)
    Lê dado da memória
    Escreve no registrador de destino

Operação de Armazenamento (SW)

    Gera endereço pela ULA (ADD)
    Escreve dado do registrador na memória

Desvio Condicional (BEQ)

    Compara registradores usando SUB
    Se resultado for zero, desvia para endereço calculado

Salto Incondicional (J)

    Muda PC diretamente para endereço especificado
    Não depende de condição

6. Interconexão dos Módulos

A beleza do design MIPS está na forma como os módulos se interconectam para formar uma máquina completa:

    Controller + Datapath: Formam a CPU que processa instruções
        Controller determina fluxo de dados baseado na instrução
        Datapath realiza operações e movimentação de dados

    Memória de Instruções + CPU: Fornece instruções para execução
        PC do datapath endereça a memória de instruções
        Instrução lida serve como entrada para controller e datapath

    CPU + Memória de Dados: Permite armazenamento persistente de dados
        ULA do datapath gera endereço para acesso à memória
        Controller determina se operação é leitura ou escrita

7. Conclusão

O módulo top demonstra a arquitetura completa do processador MIPS monociclo, onde cada componente tem uma função específica e bem definida. A simulação executada mostra o processador funcionando corretamente:

    Instrução é buscada da memória
    Controller decodifica instrução e gera sinais de controle
    Datapath executa operações conforme sinais do controller
    PC é atualizado para próxima instrução

Esta implementação do MIPS demonstra os princípios fundamentais de arquitetura de computadores, com cada módulo realizando uma função específica e todos trabalhando juntos para formar um processador completo e funcional.

                           +---------------------------------------+
                           |          Clock, Reset                 |
                           +----------------+--------------------+-+
                                            |                    |
                      +---------------------v--------------------v----+
                      |                 Memória de                    |
                      |                Instruções                     |
                      |         (instruction_memory.sv)               |
                      +---------+---------------------------------+--+
                                |                                 |
                                | Instrução[31:0]                 |
                                |                                 |
+---------------+---------------v-----------------+---------------+----+
|               |                                 |                    |
|   +----------+v-----------+             +------v--------------+     |
|   |     Controller        |             |      Datapath       |     |
|   |    (controller.sv)    |             |     (datapath.sv)   |     |
|   |                       |             |                     |     |
|   |  +------------------+ |  Sinais de  |  +---------------+  |     |
|   |  |   Main Control   | |  Controle   |  |     PC        |  |     |
|   |  | (main_control.sv)| +------------>+  |   (flopr.sv)  |  |     |
|   |  +------------------+ |             |  +-------+-------+  |     |
|   |            |          |             |          |          |     |
|   |            | ALUOp    |             |          | Endereço |     |
|   |            v          |             |          v          |     |
|   |  +------------------+ |             |  +---------------+  |     |
|   |  |    ULA Control   | |             |  |    Banco de   |  |     |
|   |  | (ula_control.sv) | |             |  |  Registradores|  |     |
|   |  +--------+---------+ |             |  |  (regfile.sv) |  |     |
|   |           |           |             |  +-------+-------+  |     |
|   |           | ULAcontrol|             |          |          |     |
|   +-----------+-----------+             |          |          |     |
|               |                         |          | Dados    |     |
|               +------------------------->  +-------v-------+  |     |
|                                         |  |      ULA      |  |     |
|                                         |  |   (ula.sv)    |  |     |
|                                         |  +-------+-------+  |     |
|          CPU Completa                   |          |          |     |
+-------------------------------------------+-------+----------+------+
                                           |        |
                                           |        | Endereço/Dados
                                           |        v
                                   +-------+------------------+
                                   |       Memória de         |
                                   |          Dados           |
                                   |     (data_memory.sv)     |
                                   +--------------------------+

Fluxo de Dados e Sinais
1. Busca de Instrução

    PC → Memória de Instruções: Endereço da instrução atual
    Memória de Instruções → Controller/Datapath: Instrução de 32 bits

2. Decodificação e Configuração

    Controller (Main Control) → Datapath: RegWrite, MemWrite, Branch, ALUSrc, RegDst, MemtoReg
    Controller (Main Control) → ULA Control: ALUOp
    ULA Control → Datapath (ULA): ULAcontrol (código da operação)

3. Execução

    Datapath (Banco de Registradores) → ULA: Operandos
    ULA → Datapath: Resultado e sinal Zero
    Zero + Branch → PC: Atualização condicional para desvios

4. Acesso à Memória

    Datapath (ULA) → Memória de Dados: Endereço de acesso
    Datapath (Banco de Registradores) → Memória de Dados: Dados para escrita (SW)
    Memória de Dados → Datapath: Dados lidos (LW)

5. Writeback

    ULA/Memória de Dados → Banco de Registradores: Dados para escrita

Componentes Internos do Datapath
                    +-------------------+
                    |    Instruction    |
                    +--------+----------+
                             |
          +------------------|------------------+
          |                  v                  |
          |         +--------+--------+         |
          |         |    Control      |         |
          |         +--------+--------+         |
          |                  |                  |
          |          +-------+-------+          |
          |          |               |          |
          |     +----+               +----+     |
          |     |                         |     |
    +-----v-----+-+               +-------v-----+
    |    MUX     |               |     MUX     |
    +-----+------+               +------+------+
          |                             |
    +-----v-----+                 +-----v-----+
    | Register  |<--------------->|    ALU    |
    |   File    |                 |           |
    +-----+-----+                 +-----+-----+
          |                             |
          |                       +-----v-----+
          |                       |    MUX    |
          |                       +-----+-----+
          |                             |
          +-----------------------------+
                        |
                  +-----v-----+
                  |  Memory   |
                  |   Data    |
                  +-----------+

Interconexão dos Principais Componentes

    PC → Adder #1 → MUX → PC:
        Ciclo de atualização do PC (PC+4 ou destino do desvio)

    Instrução → Controller → Sinais de Controle:
        Decodificação da instrução em sinais de controle

    Instrução → Banco de Registradores → ULA → Memória:
        Caminho de dados principal para execução

    ULA → Zero → AND → MUX PC:
        Circuito de decisão para instruções de desvio

    Memória de Dados/ULA → MUX → Banco de Registradores:
        Caminho de writeback para atualização dos registradores

Instâncias dos Módulos Básicos no Sistema

    adder.sv: 2 instâncias (PC+4, cálculo de endereço de desvio)
    mux2.sv: 4 instâncias (seleção de registrador destino, operando da ULA, fonte de writeback, próximo PC)
    flopr.sv: 1 instância (Program Counter)
    sl2.sv: 2 instâncias (deslocamento para endereços de desvio e jump)
    ula.sv: 1 instância (unidade aritmética-lógica principal)
    signext.sv: 1 instância (extensão de imediato de 16 para 32 bits)

Esta arquitetura demonstra a elegância do design MIPS, onde cada componente tem uma função específica e bem definida, e todos trabalham em conjunto para formar um processador completo e funcional.
